import os

cocos2d_root = os.path.dirname(os.path.abspath(__file__))
cocos2dx_root = os.path.join(cocos2d_root, 'cocos2dx')
platform_linux_root = os.path.join(cocos2dx_root, 'platform', 'linux')

execfile(os.path.expanduser('~/.emscripten'))
execfile(os.path.join(EMSCRIPTEN_ROOT, 'tools', 'ports', 'cocos2d.py'))

sources = make_source_list(cocos2d_root, cocos2dx_root)
platform_linux_sources = [f for f in os.listdir(platform_linux_root) if f.endswith('.cpp')]
includes = make_incldues(cocos2d_root, cocos2dx_root)

sources_lines = ""

for source in sources:
	if 'platform/emscripten' not in source:
		sources_lines = sources_lines + "\n\t" + os.path.join(cocos2dx_root, "proj.emscripten", source)

for source in platform_linux_sources:
	sources_lines = sources_lines + "\n\t" + os.path.join(platform_linux_root, source)

include_lines = ""
for include in includes:
	include = include.replace('/platform/emscripten', '/platform/linux')
	include = include.replace('/platform/third_party/emscripten', '/platform/third_party/linux')
	include = include.replace('libtiff/include', 'libtiff')
	include_lines = include_lines + "\n\t PUBLIC " + include


CMakeLists = """
#
# This part of CMakeLists.txt is autogenerated with (cocos2d-port for emscripten)
#

if(${EMSCRIPTEN})
    add_definitions(-DEMSCRIPTEN -DCC_KEYBOARD_SUPPORT -DGL_ES=1)
else()
    set(CMAKE_C_COMPILER "/usr/bin/clang")
    set(CMAKE_CXX_COMPILER "/usr/bin/clang++")
    set(CMAKE_C_FLAGS "-g -w -O0 -Wall")
    set(CMAKE_CXX_FLAGS "--std=c++11")
    # set(CMAKE_EXE_LINKER_FLAGS "-Wl,--unresolved-symbols=ignore-all")
    add_definitions(-DLINUX -DCC_KEYBOARD_SUPPORT -DGL_ES=1 -DCOCOS2D_DEBUG=1) # use DCOCOS2D_DEBUG=2 for full logs

    set(COCOS2D_SOURCES %s
    )

    set(COCOS2D_INLCUDE_DIRECTORIES %s
    )

    set(COCOS2D_LIBS
    	X11 GL GLEW pthread jpeg freetype z png SDL2 SDL_mixer tiff webp fontconfig
    )
endif()

# ===
""" % (sources_lines, include_lines)

print CMakeLists